openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://wade.monster.com'
paths:
  /api/abilities:
    get:
      summary: ''
      operationId: getApiAbilities
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Ability
      security: []
    post:
      summary: ''
      operationId: postApiAbilities
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Ability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: aqp
              required:
                - name
      security: []
  '/api/abilities/{ability_id}':
    patch:
      summary: ''
      operationId: patchApiAbilitiesAbility_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Ability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xuxppzexexqvorhd
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: ability_id
        description: 'The ID of the ability.'
        example: 1
        required: true
        schema:
          type: integer
  /api/Auth/login:
    post:
      summary: ''
      operationId: postApiAuthLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: antwon45@example.com
                password:
                  type: string
                  description: ''
                  example: 'gB/a=.):!'
              required:
                - email
                - password
      security: []
  /api/Auth/logout:
    post:
      summary: ''
      operationId: postApiAuthLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      security: []
  '/api/email/verify/{id}/{hash}':
    get:
      summary: ''
      operationId: getApiEmailVerifyIdHash
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Resource not found'
                properties:
                  error:
                    type: string
                    example: 'Resource not found'
      tags:
        - Auth
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify.'
        example: non
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: ''
        example: quibusdam
        required: true
        schema:
          type: string
  '/api/checkVerificationStatus/{email}':
    get:
      summary: ''
      operationId: getApiCheckVerificationStatusEmail
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'User not found'
                properties:
                  error:
                    type: string
                    example: 'User not found'
      tags:
        - Auth
      security: []
    parameters:
      -
        in: path
        name: email
        description: ''
        example: cprice@example.net
        required: true
        schema:
          type: string
  /api/cart_items:
    get:
      summary: ''
      operationId: getApiCart_items
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - CartItem
      security: []
    post:
      summary: ''
      operationId: postApiCart_items
      description: ''
      parameters: []
      responses: {  }
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: string
                  description: ''
                  example: null
                race_id:
                  type: integer
                  description: ''
                  example: 13
              required:
                - race_id
      security: []
  /api/cart_items/total_price:
    get:
      summary: ''
      operationId: getApiCart_itemsTotal_price
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_item_ids:
                  type: object
                  description: ''
                  example: []
                  properties: {  }
              required:
                - cart_item_ids
      security: []
  '/api/cart_items/{cart_item_id}':
    put:
      summary: ''
      operationId: putApiCart_itemsCart_item_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - CartItem
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: string
                  description: ''
                  example: null
      security: []
    delete:
      summary: ''
      operationId: deleteApiCart_itemsCart_item_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - CartItem
      security: []
    parameters:
      -
        in: path
        name: cart_item_id
        description: 'The ID of the cart item.'
        example: 5
        required: true
        schema:
          type: integer
  /api/natures:
    get:
      summary: ''
      operationId: getApiNatures
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Nature
      security: []
    post:
      summary: ''
      operationId: postApiNatures
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Nature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: gccdpsbfjamlk
              required:
                - name
      security: []
  '/api/natures/{nature_id}':
    patch:
      summary: ''
      operationId: patchApiNaturesNature_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Nature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vsryebleriyfewts
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: nature_id
        description: 'The ID of the nature.'
        example: 1
        required: true
        schema:
          type: integer
  /api/orders:
    post:
      summary: ''
      operationId: postApiOrders
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total_price:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 18
                payment_method:
                  type: string
                  description: ''
                  example: credit_card
                  enum:
                    - credit_card
                    - cash_on_delivery
                payment_status:
                  type: string
                  description: ''
                  example: canceled
                  enum:
                    - paid
                    - unpaid
                    - canceled
              required:
                - total_price
                - payment_method
                - payment_status
      security: []
    get:
      summary: ''
      operationId: getApiOrders
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Order
      security: []
  '/api/order_details/{order_detail_id}':
    get:
      summary: ''
      operationId: getApiOrder_detailsOrder_detail_id
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - OrderDetail
      security: []
    parameters:
      -
        in: path
        name: order_detail_id
        description: 'The ID of the order detail.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/orders/{order_id}/order_details':
    get:
      summary: ''
      operationId: getApiOrdersOrder_idOrder_details
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - OrderDetail
      security: []
    parameters:
      -
        in: path
        name: order_id
        description: 'The ID of the order.'
        example: 16
        required: true
        schema:
          type: integer
  /api/orders_details:
    post:
      summary: ''
      operationId: postApiOrders_details
      description: ''
      parameters: []
      responses: {  }
      tags:
        - OrderDetail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  description: ''
                  example: 9
                race_id:
                  type: integer
                  description: ''
                  example: 10
              required:
                - order_id
                - race_id
      security: []
  /api/payments:
    post:
      summary: ''
      operationId: postApiPayments
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Payment
      security: []
  /api/payResult:
    post:
      summary: ''
      operationId: postApiPayResult
      description: ''
      parameters: []
      responses: {  }
      tags:
        - PaymentResponse
      security: []
  /api/pokemons:
    get:
      summary: 'Create a new user.'
      operationId: createANewUser
      description: 'This endpoint allows you to show all pokemons.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Pokemons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'The first name of the user.'
                  example: accusamus
                last_name:
                  type: string
                  description: 'The last name of the user.'
                  example: et
                email:
                  type: string
                  description: 'The email address of the user.'
                  example: rsipes@example.org
              required:
                - first_name
                - last_name
                - email
    post:
      summary: ''
      operationId: postApiPokemons
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 15 characters.'
                  example: pnixyprlmhateb
                race_id:
                  type: integer
                  description: ''
                  example: 2
                ability_id:
                  type: integer
                  description: ''
                  example: 19
                nature_id:
                  type: integer
                  description: ''
                  example: 15
                level:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 23
                skills:
                  type: array
                  description: ''
                  example:
                    - 8
                  items:
                    type: integer
              required:
                - name
                - race_id
                - ability_id
                - nature_id
                - level
      security: []
  '/api/pokemons/{id}':
    get:
      summary: ''
      operationId: getApiPokemonsId
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Pokemons
      security: []
    put:
      summary: ''
      operationId: putApiPokemonsId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the pokemon. Must not be greater than 15 characters.'
                  example: Pikachu
                race_id:
                  type: integer
                  description: 'The ID of the race for the pokemon.'
                  example: 1
                ability_id:
                  type: integer
                  description: 'The ID of the ability for the pokemon.'
                  example: 1
                nature_id:
                  type: integer
                  description: 'The ID of the nature for the pokemon.'
                  example: 1
                level:
                  type: integer
                  description: 'The level for the pokemon. Must be at least 1. Must not be greater than 100.'
                  example: 1
                skills:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
      security: []
    delete:
      summary: ''
      operationId: deleteApiPokemonsId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
  '/api/pokemons/{pokemon_id}/evolution':
    put:
      summary: ''
      operationId: putApiPokemonsPokemon_idEvolution
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      security: []
    parameters:
      -
        in: path
        name: pokemon_id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
  /api/races:
    get:
      summary: ''
      operationId: getApiRaces
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Race
      security: []
  '/api/races/{race_id}/evolutionLevel':
    get:
      summary: ''
      operationId: getApiRacesRace_idEvolutionLevel
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Race
      security: []
    parameters:
      -
        in: path
        name: race_id
        description: 'The ID of the race.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/races/{race_id}/skill':
    get:
      summary: ''
      operationId: getApiRacesRace_idSkill
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Race
      security: []
    parameters:
      -
        in: path
        name: race_id
        description: 'The ID of the race.'
        example: 1
        required: true
        schema:
          type: integer
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Race
      security: []
  '/api/users/{user_id}/status':
    patch:
      summary: ''
      operationId: patchApiUsersUser_idStatus
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Race
      security: []
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 21
        required: true
        schema:
          type: integer
  '/api/users/{user}/changePassword':
    patch:
      summary: ''
      operationId: patchApiUsersUserChangePassword
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Race
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: ''
                  example: corrupti
                new_password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: yrcrghxkzkmjnfqmjoirsoywwmurwkgpnwpzxkdofhvanoihzeeqliuoaoqygfgmd
              required:
                - current_password
                - new_password
      security: []
    parameters:
      -
        in: path
        name: user
        description: 'The user.'
        example: 21
        required: true
        schema:
          type: integer
  /api/register:
    post:
      summary: ''
      operationId: postApiRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Race
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: wbskbgzttitlrmgnjp
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: spinka.lisa@example.org
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: '+7XOh9xK&'
              required:
                - name
                - email
                - password
      security: []
tags:
  -
    name: Ability
    description: 'Operations related to abilities.'
  -
    name: Auth
    description: 'Operations related to auths.'
  -
    name: CartItem
    description: 'Operations related to cartItems.'
  -
    name: Nature
    description: 'Operations related to natures.'
  -
    name: Order
    description: 'Operations related to orders.'
  -
    name: OrderDetail
    description: 'Operations related to orderDetais.'
  -
    name: Payment
    description: 'Operations related to payments.'
  -
    name: PaymentResponse
    description: 'Operations related to payments.'
  -
    name: Pokemons
    description: 'Operations related to pokemons.'
  -
    name: Race
    description: 'Operations related to races.'
