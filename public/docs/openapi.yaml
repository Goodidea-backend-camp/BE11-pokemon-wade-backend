openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/Auth/login:
    post:
      summary: 登入
      operationId: ''
      description: "此端點允許用戶使用他們的電子郵件和密碼來登入系統，並返回一個JWT令牌。\n\n會確認信箱是否已驗證，如果尚未驗證返回錯誤\n會設置cookie和http only來傳token"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful'
                  user: 'Authenticated user object'
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  user:
                    type: string
                    example: 'Authenticated user object'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Invalid credentials'
                properties:
                  error:
                    type: string
                    example: 'Invalid credentials'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 信箱未驗證
                properties:
                  error:
                    type: string
                    example: 信箱未驗證
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 用戶的電子郵件地址。example：user@example.com
                  example: abuckridge@example.net
                password:
                  type: string
                  description: 用戶的密碼。
                  example: e123456
              required:
                - email
                - password
      security: []
  /api/Auth/logout:
    post:
      summary: 登出
      operationId: ''
      description: "此端點允許已經登入的用戶登出，它會使當前的JWT令牌失效。\n\n成功要把cookie清掉。 200."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully logged out'
                properties:
                  message:
                    type: string
                    example: 'Successfully logged out'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Failed to logout'
                properties:
                  message:
                    type: string
                    example: 'Failed to logout'
      tags:
        - Auth
      security: []
  /api/cart_items:
    get:
      summary: 顯示購物車商品
      operationId: ''
      description: 這部分主要是用來顯示購物車頁面的商品資訊
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 67
                      amount: 1
                      current_price: '147.00'
                      race_name: charizard
                      race_photo: 'https://raw.githubusercontent.com/*PokeAPI/sprites/master/sprites/pokemon/6.png'
                      race_id: 6
                    -
                      id: 68
                      amount: 1
                      current_price: '478.00'
                      race_name: wartortle
                      race_photo: 'https://raw.githubusercontent.com/*PokeAPI/sprites/master/sprites/pokemon/8.png'
                      race_id: 8
                  subtotal: 625
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 67
                        amount: 1
                        current_price: '147.00'
                        race_name: charizard
                        race_photo: 'https://raw.githubusercontent.com/*PokeAPI/sprites/master/sprites/pokemon/6.png'
                        race_id: 6
                      -
                        id: 68
                        amount: 1
                        current_price: '478.00'
                        race_name: wartortle
                        race_photo: 'https://raw.githubusercontent.com/*PokeAPI/sprites/master/sprites/pokemon/8.png'
                        race_id: 8
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 67
                        amount:
                          type: integer
                          example: 1
                        current_price:
                          type: string
                          example: '147.00'
                        race_name:
                          type: string
                          example: charizard
                        race_photo:
                          type: string
                          example: 'https://raw.githubusercontent.com/*PokeAPI/sprites/master/sprites/pokemon/6.png'
                        race_id:
                          type: integer
                          example: 6
                  subtotal:
                    type: integer
                    example: 625
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - CartItem
    post:
      summary: 加入購物車
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Item added to cart successfully.'
                properties:
                  message:
                    type: string
                    example: 'Item added to cart successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Requested quantity exceeds available stock.'
                properties:
                  error:
                    type: string
                    example: 'Requested quantity exceeds available stock.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Race not found.'
                properties:
                  error:
                    type: string
                    example: 'Race not found.'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: 購買的數量，必須在1到庫存的範圍內。
                  example: 2
                race_id:
                  type: integer
                  description: 種族的ID，必須存在於種族表中。
                  example: 5
              required:
                - quantity
                - race_id
    put:
      summary: 購物車更新
      operationId: ''
      description: 在此API會更新購物車資訊，然後將總金額計算後回傳
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation error message.'
                properties:
                  error:
                    type: string
                    example: 'Validation error message.'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                'products[]':
                  type: array
                  description: 'The list of products to update.'
                  example:
                    -
                      product_id: '123'
                      quantity: 2
                    -
                      product_id: '456'
                      quantity: 5
                  items:
                    type: string
                products:
                  type: object
                  description: ''
                  example:
                    product_id: architecto
                  properties:
                    product_id:
                      type: string
                      description: 'The ID of the product.'
                      example: architecto
                    quantity:
                      type: integer
                      description: 'The new quantity for the product.'
                      example: 19
                quantity:
                  type: integer
                  description: 更新的商品數量，必須在1到庫存的範圍內。
                  example: 3
              required:
                - 'products[]'
                - quantity
  '/api/cart_items/{cart_item_id}':
    delete:
      summary: 購物車刪除
      operationId: ''
      description: ''
      parameters: []
      responses:
        204:
          description: ''
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Resource not found.'
                properties:
                  error:
                    type: string
                    example: 'Resource not found.'
      tags:
        - CartItem
    parameters:
      -
        in: path
        name: cart_item_id
        description: 'The ID of the cart item.'
        example: 5
        required: true
        schema:
          type: integer
  /api/login/google:
    get:
      summary: 重定向到Google进行身份验证
      operationId: Google
      description: "调用此端点後端會回傳授權的url，前端再將用户重定向到Google的登录页面进行身份验证。\n成功后，Google会将用户重定向回应用的回调URL也就是以下的API。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  url: 'https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=...'
                properties:
                  url:
                    type: string
                    example: 'https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=...'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Unable to redirect to Google. Please try again later.'
                properties:
                  error:
                    type: string
                    example: 'Unable to redirect to Google. Please try again later.'
      tags:
        - GoogleLogin
      security: []
  /api/login/google/callback:
    get:
      summary: '處理從 Google 第三方認證服務頁面返回的回調。'
      operationId: Google
      description: "此處就是可以從google拿到使用者資訊並儲存在資料庫\n然後反回帶token的cookie"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful via Google'
                  user: 使用者的資料
                properties:
                  message:
                    type: string
                    example: 'Login successful via Google'
                  user:
                    type: string
                    example: 使用者的資料
      tags:
        - GoogleLogin
      security: []
  /api/orders:
    post:
      summary: 訂單新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 'Newly created order ID'
                properties:
                  id:
                    type: string
                    example: 'Newly created order ID'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    field_name:
                      - 'The field_name is required.'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      field_name:
                        type: array
                        example:
                          - 'The field_name is required.'
                        items:
                          type: string
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Server Error'
                properties:
                  message:
                    type: string
                    example: 'Server Error'
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total_price:
                  type: number
                  description: 訂單的總價格。
                  example: 6857.879
                payment_method:
                  type: string
                  description: "訂單的付款方式，只能是 'credit_card' 或 'cash_on_delivery'。"
                  example: pariatur
                payment_status:
                  type: string
                  description: "訂單的付款狀態，只能是 'paid', 'unpaid', 或 'canceled'。"
                  example: enim
              required:
                - total_price
                - payment_method
                - payment_status
    get:
      summary: "訂單列表\n獲取當前登錄用戶的所有訂單列表。"
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            \"id\": \"訂單的唯一ID\",\n            \"user_name\": \"下訂單的用戶名稱\",\n            \"total_price\": \"訂單的總價格\",\n            \"payment_method\": \"訂單的付款方式 (例如: credit_card, cash_on_delivery)\",\n            \"payment_status\": \"訂單的付款狀態 (例如: paid, unpaid, canceled)\"\n        },\n        ...其他訂單的資料\n    ]\n}"
      tags:
        - Order
  '/api/orders/{order_id}/order_details':
    get:
      summary: 訂單細節列表
      operationId: ''
      description: 用於獲取指定訂單的所有訂單詳情。
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            \"id\": \"訂單詳情的唯一ID\",\n            \"race_name\": \"相應的種族名稱\",\n            \"quantity\": \"訂購數量\",\n            \"unit_price\": \"單位價格\",\n            \"subtotal_price\": \"小計價格\"\n        },\n        ...其他訂單詳情的資料\n    ]\n}"
      tags:
        - OrderDetail
    parameters:
      -
        in: path
        name: order_id
        description: 'The ID of the order.'
        example: 16
        required: true
        schema:
          type: integer
      -
        in: path
        name: order
        description: 訂單的ID。用於指定查詢哪一個訂單的詳情。
        example: recusandae
        required: true
        schema:
          type: string
  /api/orders_details:
    post:
      summary: 訂單細節新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: 'Order detail created successfully.'
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Order detail created successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Validation error.'
                  errors:
                    order_id:
                      - 'The order id field is required.'
                    race_id:
                      - 'The race id field is required.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Validation error.'
                  errors:
                    type: object
                    properties:
                      order_id:
                        type: array
                        example:
                          - 'The order id field is required.'
                        items:
                          type: string
                      race_id:
                        type: array
                        example:
                          - 'The race id field is required.'
                        items:
                          type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Race not found.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Race not found.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Server error.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Server error.'
      tags:
        - OrderDetail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  description: 訂單的ID。
                  example: 19
                race_id:
                  type: integer
                  description: "產品(Race)的ID。\n\n根據指定的race_id從使用者的購物車中提取數量，並根據race的價格計算出單價和總價。\n建立訂單細節後，減少相應的庫存，並清除使用者購物車中的該race項。"
                  example: 20
              required:
                - order_id
                - race_id
  /api/payments:
    post:
      summary: 請求藍星金流結帳頁面
      operationId: ''
      description: "主要使用者點選結帳後可以請求這個API，然後藍星金流會發結帳頁面給使用者，\n此方法主要功能如下：\n1. 驗證當前使用者。\n2. 更新與當前使用者關聯的購物車項目的結帳狀態。\n3. 生成與藍星金流相關的支付參數（包括加密和哈希）。\n4. 返回支付參數，以便前端將使用者重定向到藍星金流的支付頁面。"
      parameters: []
      responses: {  }
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totalPrice:
                  type: number
                  description: 購物車中所有商品的總價格。
                  example: 64449307.6066
              required:
                - totalPrice
  /api/payResult:
    post:
      summary: 藍星金流結帳完後結果返回確認，寄通知信給使用者
      operationId: ''
      description: "此方法主要功能如下：\n1. 從請求中提取支付相關的資訊。\n2. 驗證支付回調的數字簽名以確保資料的完整性。\n3. 根據支付結果記錄相關的日誌資訊。\n4. 在支付成功後向使用者發送通知郵件。"
      parameters: []
      responses: {  }
      tags:
        - PaymentResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TradeInfo:
                  type: string
                  description: 支付相關的加密資料。
                  example: et
                TradeSha:
                  type: string
                  description: 支付回調的數字簽名。
                  example: repellendus
              required:
                - TradeInfo
                - TradeSha
  /api/pokemons:
    get:
      summary: 寶可夢列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"id\": 123,\n    \"name\": \"myBaby\",\n    \"level\": 50,\n    \"race_id\": 25,\n    \"race\": \"Pikachu\",\n    \"photo\": \"http://example.com/pikachu.jpg\",\n    \"ability\": \"Static\",\n    \"nature\": \"Jolly\",\n    \"skills\": [\"Thunderbolt\", \"Quick Attack\"],\n    \"host\": \"Ash Ketchum\"\n    \"evolution_level\":16\n}"
      tags:
        - Pokemons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'The first name of the user.'
                  example: a
                last_name:
                  type: string
                  description: 'The last name of the user.'
                  example: ut
                email:
                  type: string
                  description: 'The email address of the user.'
                  example: pkihn@example.org
              required:
                - first_name
                - last_name
                - email
  '/api/pokemons/{id}':
    get:
      summary: 顯示指定寶可夢的詳細資訊。
      operationId: ''
      description: 此方法獲取指定寶可夢的詳細資訊，包括其種族、能力、性格和技能。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: daddy
                  level: 10
                  race_id: 1
                  race: pikachu
                  ability: 靜電
                  nature: 認真
                  skills:
                    - 電擊
                    - 鐵尾
                  host: Ash
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: daddy
                  level:
                    type: integer
                    example: 10
                  race_id:
                    type: integer
                    example: 1
                  race:
                    type: string
                    example: pikachu
                  ability:
                    type: string
                    example: 靜電
                  nature:
                    type: string
                    example: 認真
                  skills:
                    type: array
                    example:
                      - 電擊
                      - 鐵尾
                    items:
                      type: string
                  host:
                    type: string
                    example: Ash
      tags:
        - Pokemons
    delete:
      summary: 刪除指定的寶可夢。
      operationId: ''
      description: "此方法允許授權的使用者刪除他們的寶可夢。\n成功刪除寶可夢後，將返回成功響應。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'pokemon deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'pokemon deleted successfully'
        204:
          description: ''
      tags:
        - Pokemons
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
      -
        in: path
        name: pokemon
        description: 寶可夢的ID。示例：1
        example: 8
        required: true
        schema:
          type: integer
  '/api/pokemons/{pokemon_id}/evolution':
    put:
      summary: 判斷指定的寶可夢是否可以進化。
      operationId: ''
      description: "此方法首先檢查當前用戶是否有權進行進化操作，\n然後檢查寶可夢是否達到其種族所需的進化等級。\n如果寶可夢已達到進化等級，則更新其種族ID以反映其新的進化形態。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 寶可夢已是最終形態
                properties:
                  message:
                    type: string
                    example: 寶可夢已是最終形態
      tags:
        - Pokemons
    parameters:
      -
        in: path
        name: pokemon_id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
      -
        in: path
        name: pokemon
        description: 寶可夢的ID。範例：1
        example: 18
        required: true
        schema:
          type: integer
  /api/races:
    get:
      summary: 取得寶可夢種族的列表。
      operationId: ''
      description: "此API不需要驗證。\n此方法返回一個包含所有寶可夢種族的列表，\n每個種族包括其ID、名稱和照片。列表會分頁，每頁包含12個項目。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"current_page\": 1,\n\"data\": [\n{\n\"id\": 1,\n\"name\": \"bulbasaur\",\n\"photo\": \"https://raw.githubusercontent.com/PokeAPI/*sprites/master/sprites/pokemon/1.png\"\n\"stock\":334,\n\"price\":2344\n},\n{\n\"id\": 2,\n\"name\": \"ivysaur\",\n\"photo\": \"https://raw.githubusercontent.com/PokeAPI/*sprites/master/sprites/pokemon/2.png\",\n\"stock\":334,\n\"price\":2344\n},\n{\n\"id\": 3,\n\"name\": \"venusaur\",\n\"photo\": \"https://raw.githubusercontent.com/PokeAPI/*sprites/master/sprites/pokemon/3.png\",\n\"stock\":334,\n\"price\":2344\n},...\n\n],\n\"first_page_url\": \"http://localhost:8000/api/races?page=1\",\n\"from\": 1,\n\"last_page\": 85,\n\"last_page_url\": \"http://localhost:8000/api/races?page=85\",\n\"next_page_url\": \"http://localhost:8000/api/races?page=2\",\n\"path\": \"http://localhost:8000/api/races\",\n\"per_page\": 12,\n\"prev_page_url\": null,\n\"to\": 12,\n\"total\": 1010\n}"
      tags:
        - Race
      security: []
  /api/register:
    post:
      summary: 處理新使用者的註冊並寄送註冊信。
      operationId: ''
      description: "此方法會驗證輸入的資料，並在成功驗證後在`users`表中創建一個新的使用者紀錄。\n之後，它會觸發一個`Registered`事件，並返回一個成功的響應，包括新創建的使用者的資料。"
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\": \"User registered successfully!\",\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    // other user fields...\n  }\n}"
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ],\n    // other validation errors...\n  }\n}"
      tags:
        - Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: '使用者的名字。示例：John Doe'
                  example: quod
                email:
                  type: string
                  description: 使用者的電子郵件地址。必須是唯一的並且符合電子郵件格式。示例：john.doe@example.com
                  example: gayle.cronin@example.com
                password:
                  type: string
                  description: 使用者的密碼。必須至少有6個字符長並且與`password_confirmation`參數匹配。示例：password123
                  example: nHBbv|o|w7
                password_confirmation:
                  type: string
                  description: 密碼確認。必須與`password`參數匹配。示例：password123
                  example: porro
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/user:
    get:
      summary: 使用者個人資訊
      operationId: ''
      description: "同時驗證cookie的token有效性，\n失敗的話要清除token。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  name: 'John Doe'
                  photo: 'https://example.com/photo.jpg'
                  email: johndoe@example.com
                properties:
                  name:
                    type: string
                    example: 'John Doe'
                  photo:
                    type: string
                    example: 'https://example.com/photo.jpg'
                  email:
                    type: string
                    example: johndoe@example.com
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 驗證失敗
                properties:
                  error:
                    type: string
                    example: 驗證失敗
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'User not found'
                properties:
                  error:
                    type: string
                    example: 'User not found'
      tags:
        - User
    post:
      summary: 更新使用者資訊。
      operationId: ''
      description: "此方法允許更新使用者的基本資訊。如果請求中包含用戶照片，它將生成一個預簽名的URL，\n以便用戶的瀏覽器可以直接上傳圖片到S3。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  presignedUrl: 'https://example.com/presigned-url'
                  fileDestination: userPhotos/1234567890.jpg
                properties:
                  presignedUrl:
                    type: string
                    example: 'https://example.com/presigned-url'
                  fileDestination:
                    type: string
                    example: userPhotos/1234567890.jpg
      tags:
        - User
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                userPhoto:
                  type: string
                  format: binary
                  description: 'optional 用戶的新照片。應該是一個圖像文件。'
                name:
                  type: string
                  description: 'optional 新的用戶名稱。示例：John Doe'
                  example: nostrum
                email:
                  type: string
                  description: 'optional 新的電子郵件地址。示例：john.doe@example.com'
                  example: veum.logan@example.net
tags:
  -
    name: Auth
    description: 'Operations related to auth.'
  -
    name: CartItem
    description: 'Operations related to cartItems.'
  -
    name: GoogleLogin
    description: 'Operations related to googleLogin.'
  -
    name: Order
    description: 'Operations related to orders.'
  -
    name: OrderDetail
    description: 'Operations related to orderDetais.'
  -
    name: Payment
    description: 'Operations related to payments.'
  -
    name: PaymentResponse
    description: "\n此為藍星金流在結帳完之後會通知後台的，接收結果用的API"
  -
    name: Pokemons
    description: 'Operations related to pokemons.'
  -
    name: Race
    description: "Operations related to races.\n這裡的種族就是寶可夢的意思"
  -
    name: Register
    description: 'Operations related to register.'
  -
    name: User
    description: 'Operations related to users.'
