openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://wade.monster.com'
paths:
  /api/abilities:
    get:
      summary: 特性列表
      operationId: ''
      description: 主要在於可以讓使用更新寶可夢的時候，在特性部分有選項可以讓使用者選擇
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"id\": \"3\",\n \"name\": \"strong\",\n}"
      tags:
        - Ability
    post:
      summary: 特性新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Ability saved successfully'
                properties:
                  message:
                    type: string
                    example: 'Ability saved successfully'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    name:
                      - 名稱只能包含中文和英文字。
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        example:
                          - 名稱只能包含中文和英文字。
                        items:
                          type: string
      tags:
        - Ability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: '能力的名稱. 必須是唯一的，只能包含中文和英文字，且最大長度為255個字符.'
                  example: eum
              required:
                - name
  '/api/abilities/{ability_id}':
    patch:
      summary: 特性修改
      operationId: ''
      description: 此端點允許您更新現有的特性。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Ability updated successfully'
                properties:
                  message:
                    type: string
                    example: 'Ability updated successfully'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    name:
                      - 名稱只能包含中文和英文字符。
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        example:
                          - 名稱只能包含中文和英文字符。
                        items:
                          type: string
      tags:
        - Ability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: '需要更新的特性名稱. 必須是唯一的，只能包含中文和英文字符，且最大長度為255個字符.'
                  example: at
              required:
                - name
    parameters:
      -
        in: path
        name: ability_id
        description: 'The ID of the ability.'
        example: 1
        required: true
        schema:
          type: integer
  /api/Auth/login:
    post:
      summary: 登入
      operationId: ''
      description: 此端點允許用戶使用他們的電子郵件和密碼來登入系統，並返回一個JWT令牌。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful'
                  token: 'Generated JWT token'
                  user: 'Authenticated user object'
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  token:
                    type: string
                    example: 'Generated JWT token'
                  user:
                    type: string
                    example: 'Authenticated user object'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Invalid credentials'
                properties:
                  error:
                    type: string
                    example: 'Invalid credentials'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 用戶的電子郵件地址。例子：user@example.com
                  example: anastacio42@example.com
                password:
                  type: string
                  description: 用戶的密碼。
                  example: 'gMd:=q2(|p'
              required:
                - email
                - password
      security: []
  /api/Auth/logout:
    post:
      summary: 登出
      operationId: ''
      description: 此端點允許已經登入的用戶登出，它會使當前的JWT令牌失效。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully logged out'
                properties:
                  message:
                    type: string
                    example: 'Successfully logged out'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Failed to logout'
                properties:
                  message:
                    type: string
                    example: 'Failed to logout'
      tags:
        - Auth
      security: []
  '/api/email/verify/{id}/{hash}':
    get:
      summary: 註冊email驗證信確認
      operationId: email
      description: "電子郵件驗證確認\n\n此端點用於確認用戶的電子郵件驗證。它會比對提供的hash值和用戶的電子郵件生成的hash值。\n如果驗證成功，該用戶的電子郵件將被標記為已驗證，並且將觸發一個已驗證的事件。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email already verified.'
                properties:
                  message:
                    type: string
                    example: 'Email already verified.'
      tags:
        - Auth
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify.'
        example: necessitatibus
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: ''
        example: libero
        required: true
        schema:
          type: string
  '/api/checkVerificationStatus/{email}':
    get:
      summary: 確認user表註冊驗證信狀態
      operationId: user
      description: "此端點用於檢查指定電子郵件的用戶是否已完成電子郵件驗證。\n它將返回用戶的電子郵件驗證狀態，無論是已驗證還是未驗證。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"isVerified\": true/false\n}"
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'User not found'
                properties:
                  error:
                    type: string
                    example: 'User not found'
      tags:
        - Auth
      security: []
    parameters:
      -
        in: path
        name: email
        description: ''
        example: kuhic.ellsworth@example.com
        required: true
        schema:
          type: string
  /api/cart_items:
    get:
      summary: 顯示購物車商品
      operationId: ''
      description: 這部分主要是用來顯示購物車頁面的商品資訊
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            \"id\": \"項目ID\",\n            \"amount\": \"購物車中的商品數量\",\n            \"current_price\": \"當前種族價格（如果種族已加載）\",\n            \"race_name\": \"種族名稱（如果種族已加載）\",\n            \"race_photo\": \"種族圖片URL（如果種族已加載）\",\n            \"race_id\": \"種族ID（如果種族已加載）\"\n        },\n\n    ]\n}"
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - CartItem
    post:
      summary: 加入購物車
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Item added to cart successfully.'
                properties:
                  message:
                    type: string
                    example: 'Item added to cart successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Requested quantity exceeds available stock.'
                properties:
                  error:
                    type: string
                    example: 'Requested quantity exceeds available stock.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Race not found.'
                properties:
                  error:
                    type: string
                    example: 'Race not found.'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: 購買的數量，必須在1到庫存的範圍內。
                  example: 2
                race_id:
                  type: integer
                  description: 種族的ID，必須存在於種族表中。
                  example: 5
              required:
                - quantity
                - race_id
  /api/cart_items/total_price:
    get:
      summary: 購物車總價格計算
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    total_price: 計算的總金額
                properties:
                  data:
                    type: object
                    properties:
                      total_price:
                        type: string
                        example: 計算的總金額
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Some cart items do not belong to the user or do not exist'
                properties:
                  error:
                    type: string
                    example: 'Some cart items do not belong to the user or do not exist'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_item_ids:
                  type: array
                  description: 需要計算的購物車項目ID的列表。
                  example:
                    - 1
                    - 2
                    - 3
                  items:
                    type: string
              required:
                - cart_item_ids
  '/api/cart_items/{cart_item_id}':
    put:
      summary: 購物車更新
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_price: 總金額
                properties:
                  total_price:
                    type: string
                    example: 總金額
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation error message.'
                properties:
                  error:
                    type: string
                    example: 'Validation error message.'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: 更新的商品數量，必須在1到庫存的範圍內。
                  example: 3
              required:
                - quantity
    delete:
      summary: 購物車刪除
      operationId: ''
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - CartItem
    parameters:
      -
        in: path
        name: cart_item_id
        description: 'The ID of the cart item.'
        example: 5
        required: true
        schema:
          type: integer
  /api/login/google:
    get:
      summary: 將用戶重定向到Google的OAuth認證頁面。
      operationId: GoogleOAuth
      description: "此方法嘗試將用戶重定向到Google的OAuth服務。\n如果在重定向過程中出現錯誤，它會捕獲異常\n並回應一個JSON錯誤訊息。"
      parameters: []
      responses:
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 無法重定向到Google。請稍後再試。
                properties:
                  error:
                    type: string
                    example: 無法重定向到Google。請稍後再試。
      tags:
        - GoogleLogin
      security: []
  /api/login/google/callback:
    get:
      summary: '處理從 Google 第三方認證服務頁面返回的回調。'
      operationId: Google
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful via Google'
                  token: '使用者的 JWT 令牌'
                  user: 使用者的資料
                properties:
                  message:
                    type: string
                    example: 'Login successful via Google'
                  token:
                    type: string
                    example: '使用者的 JWT 令牌'
                  user:
                    type: string
                    example: 使用者的資料
      tags:
        - GoogleLogin
      security: []
  /api/natures:
    get:
      summary: 性格詳情
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: '性格的 ID'
                    name: 性格的名稱
      tags:
        - Nature
    post:
      summary: 性格新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Nature saved successfully'
                properties:
                  message:
                    type: string
                    example: 'Nature saved successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation error messages if any'
                properties:
                  error:
                    type: string
                    example: 'Validation error messages if any'
      tags:
        - Nature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 性格的名稱。要求是唯一的且最多包含255個字符。
                  example: quisquam
              required:
                - name
  '/api/natures/{nature_id}':
    patch:
      summary: 性格修改
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Nature updated successfully'
                properties:
                  message:
                    type: string
                    example: 'Nature updated successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation error messages if any'
                properties:
                  error:
                    type: string
                    example: 'Validation error messages if any'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Nature not found'
                properties:
                  message:
                    type: string
                    example: 'Nature not found'
      tags:
        - Nature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 性格的新名稱。要求是唯一的且最多包含255個字符。
                  example: ullam
              required:
                - name
    parameters:
      -
        in: path
        name: nature_id
        description: 'The ID of the nature.'
        example: 1
        required: true
        schema:
          type: integer
  /api/orders:
    post:
      summary: 訂單新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 新創建的訂單的ID
                properties:
                  id:
                    type: string
                    example: 新創建的訂單的ID
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total_price:
                  type: number
                  description: 訂單的總價格。
                  example: 24981323.096008
                payment_method:
                  type: string
                  description: 訂單的付款方式。
                  example: dignissimos
                payment_status:
                  type: string
                  description: 訂單的付款狀態。
                  example: officia
              required:
                - total_price
                - payment_method
                - payment_status
    get:
      summary: 訂單列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            ...各個訂單的資料\n        }\n    ]\n}"
      tags:
        - Order
  '/api/orders/{order_id}/order_details':
    get:
      summary: 訂單細節列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - OrderDetail
    parameters:
      -
        in: path
        name: order_id
        description: 'The ID of the order.'
        example: 16
        required: true
        schema:
          type: integer
      -
        in: path
        name: order
        description: 訂單的ID。
        example: unde
        required: true
        schema:
          type: string
  /api/orders_details:
    post:
      summary: 訂單細節新增
      operationId: ''
      description: ''
      parameters: []
      responses: {  }
      tags:
        - OrderDetail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  description: 訂單的ID。
                  example: 3
                race_id:
                  type: integer
                  description: "產品(Race)的ID。\n\n根據指定的race_id從使用者的購物車中提取數量，並根據race的價格計算出單價和總價。\n建立訂單細節後，減少相應的庫存，並清除使用者購物車中的該race項。"
                  example: 3
              required:
                - order_id
                - race_id
  /api/payments:
    post:
      summary: 請求藍星金流結帳頁面
      operationId: ''
      description: "此方法主要功能如下：\n1. 驗證當前使用者。\n2. 更新與當前使用者關聯的購物車項目的結帳狀態。\n3. 生成與藍星金流相關的支付參數（包括加密和哈希）。\n4. 返回支付參數，以便前端將使用者重定向到藍星金流的支付頁面。"
      parameters: []
      responses: {  }
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totalPrice:
                  type: number
                  description: 購物車中所有商品的總價格。
                  example: 69855.655
              required:
                - totalPrice
  /api/payResult:
    post:
      summary: 藍星金流結帳完後結果返回確認，寄通知信給使用者
      operationId: ''
      description: "此方法主要功能如下：\n1. 從請求中提取支付相關的資訊。\n2. 驗證支付回調的數字簽名以確保資料的完整性。\n3. 根據支付結果記錄相關的日誌資訊。\n4. 在支付成功後向使用者發送通知郵件。"
      parameters: []
      responses: {  }
      tags:
        - PaymentResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TradeInfo:
                  type: string
                  description: 支付相關的加密資料。
                  example: asperiores
                TradeSha:
                  type: string
                  description: 支付回調的數字簽名。
                  example: ea
              required:
                - TradeInfo
                - TradeSha
  /api/pokemons:
    get:
      summary: 使用者寶可夢的列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Pokemons
    post:
      summary: 新增一個屬於該使用者的寶可夢。
      operationId: ''
      description: "此方法將驗證請求數據，並在成功驗證後，\n為當前經過身份驗證的用戶新增一隻寶可夢。"
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 寶可夢的名稱，必填，最大15字符長，且必須在系統中是唯一的。：皮卡丘
                  example: amet
                race_id:
                  type: integer
                  description: "寶可夢的種族ID，必填，該ID必須存在於系統的'races'表中。：1"
                  example: 16
                ability_id:
                  type: integer
                  description: "寶可夢的能力ID，必填，該ID必須存在於系統的'abilities'表中。：2"
                  example: 4
                nature_id:
                  type: integer
                  description: "寶可夢的性格ID，必填，該ID必須存在於系統的'natures'表中。：3"
                  example: 12
                level:
                  type: integer
                  description: 寶可夢的等級，必填，其值必須是1到100之間的整數。：10
                  example: 15
                skills:
                  type: array
                  description: '寶可夢的技能列表，必填，至少包含1項，最多4項技能。：[1, 2, 3]'
                  example:
                    - aut
                  items:
                    type: string
              required:
                - name
                - race_id
                - ability_id
                - nature_id
                - level
                - skills
  '/api/pokemons/{id}':
    get:
      summary: 顯示指定寶可夢的詳細資訊。
      operationId: ''
      description: 此方法獲取指定寶可夢的詳細資訊，包括其種族、能力、性格和技能。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 皮卡丘
                  level: 10
                  race_id: 1
                  race: 電鼠
                  ability: 靜電
                  nature: 認真
                  skills:
                    - 電擊
                    - 鐵尾
                  host: Ash
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 皮卡丘
                  level:
                    type: integer
                    example: 10
                  race_id:
                    type: integer
                    example: 1
                  race:
                    type: string
                    example: 電鼠
                  ability:
                    type: string
                    example: 靜電
                  nature:
                    type: string
                    example: 認真
                  skills:
                    type: array
                    example:
                      - 電擊
                      - 鐵尾
                    items:
                      type: string
                  host:
                    type: string
                    example: Ash
      tags:
        - Pokemons
    put:
      summary: 修改指定的寶可夢。
      operationId: ''
      description: "此方法允許使用者修改他們的寶可夢的資訊。\n使用者只能修改他們自己的寶可夢，不能修改其他人的寶可夢。"
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'optional 寶可夢的名字。最大長度為15個字符。範例：皮卡丘'
                  example: laudantium
                race_id:
                  type: integer
                  description: "optional 寶可夢的種族ID。該ID必須存在於系統的'races'表中。範例：1"
                  example: 7
                ability_id:
                  type: integer
                  description: "optional 寶可夢的能力ID。該ID必須存在於系統的'abilities'表中。範例：2"
                  example: 9
                nature_id:
                  type: integer
                  description: "optional 寶可夢的性格ID。該ID必須存在於系統的'natures'表中。範例：3"
                  example: 1
                level:
                  type: integer
                  description: 'optional 寶可夢的等級。其值必須是1到100之間的整數。範例：10'
                  example: 11
                skills:
                  type: array
                  description: 'optional 寶可夢的技能列表。至少包含1項，最多4項技能。範例：[1, 2, 3]'
                  example:
                    - veritatis
                  items:
                    type: string
    delete:
      summary: 刪除指定的寶可夢。
      operationId: ''
      description: "此方法允許授權的使用者刪除他們的寶可夢。\n成功刪除寶可夢後，將返回成功響應。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'pokemon deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'pokemon deleted successfully'
        204:
          description: ''
      tags:
        - Pokemons
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
      -
        in: path
        name: pokemon
        description: 寶可夢的ID。示例：1
        example: 9
        required: true
        schema:
          type: integer
  '/api/pokemons/{pokemon_id}/evolution':
    put:
      summary: 判斷指定的寶可夢是否可以進化。
      operationId: ''
      description: "此方法首先檢查當前用戶是否有權進行進化操作，\n然後檢查寶可夢是否達到其種族所需的進化等級。\n如果寶可夢已達到進化等級，則更新其種族ID以反映其新的進化形態。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 寶可夢已是最終形態
                properties:
                  message:
                    type: string
                    example: 寶可夢已是最終形態
      tags:
        - Pokemons
    parameters:
      -
        in: path
        name: pokemon_id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
      -
        in: path
        name: pokemon
        description: 寶可夢的ID。範例：1
        example: 11
        required: true
        schema:
          type: integer
  /api/races:
    get:
      summary: 取得寶可夢種族的列表。
      operationId: ''
      description: "此方法返回一個包含所有寶可夢種族的列表，\n每個種族包括其ID、名稱和照片。列表會分頁，每頁包含10個項目。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"皮卡丘\",\n      \"photo\": \"url_to_photo\"\n    },\n    // 其他種族...\n  ]\n}"
      tags:
        - Race
  '/api/races/{race_id}/evolutionLevel':
    get:
      summary: 取得指定種族的進化等級。
      operationId: ''
      description: 此方法返回指定種族的進化等級。進化等級是一個整數值，表示寶可夢在達到這個等級時可以進化。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  evolution_level: 20
                properties:
                  id:
                    type: integer
                    example: 1
                  evolution_level:
                    type: integer
                    example: 20
      tags:
        - Race
    parameters:
      -
        in: path
        name: race_id
        description: 'The ID of the race.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: race
        description: 寶可夢種族的ID。示例：1
        example: 2
        required: true
        schema:
          type: integer
  '/api/races/{race_id}/skill':
    get:
      summary: 取得指定種族能夠學的技能。
      operationId: ''
      description: 此方法返回指定種族能夠學習的所有技能。技能按照它們的ID排序。
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "[\n  {\n    \"id\": 1,\n    \"name\": \"電擊\"\n  },\n  // 其他技能...\n]"
      tags:
        - Race
    parameters:
      -
        in: path
        name: race_id
        description: 'The ID of the race.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: race
        description: 寶可夢種族的ID。示例：1
        example: 16
        required: true
        schema:
          type: integer
  /api/register:
    post:
      summary: 處理新使用者的註冊並寄送註冊信。
      operationId: ''
      description: "此方法會驗證輸入的資料，並在成功驗證後在`users`表中創建一個新的使用者紀錄。\n之後，它會觸發一個`Registered`事件，並返回一個成功的響應，包括新創建的使用者的資料。"
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\": \"User registered successfully!\",\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    // other user fields...\n  }\n}"
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ],\n    // other validation errors...\n  }\n}"
      tags:
        - Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: '使用者的名字。示例：John Doe'
                  example: corporis
                email:
                  type: string
                  description: 使用者的電子郵件地址。必須是唯一的並且符合電子郵件格式。示例：john.doe@example.com
                  example: abartoletti@example.org
                password:
                  type: string
                  description: 使用者的密碼。必須至少有6個字符長並且與`password_confirmation`參數匹配。示例：password123
                  example: '\Kzs"*~1:3V2C?<KRl'
                password_confirmation:
                  type: string
                  description: 密碼確認。必須與`password`參數匹配。示例：password123
                  example: sed
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/user:
    get:
      summary: 使用者個人資訊
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  name: 'John Doe'
                  photo: 'https://example.com/photo.jpg'
                  email: johndoe@example.com
                properties:
                  name:
                    type: string
                    example: 'John Doe'
                  photo:
                    type: string
                    example: 'https://example.com/photo.jpg'
                  email:
                    type: string
                    example: johndoe@example.com
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'User not found'
                properties:
                  error:
                    type: string
                    example: 'User not found'
      tags:
        - User
    post:
      summary: 更新使用者資訊。
      operationId: ''
      description: "此方法允許更新使用者的基本資訊。如果請求中包含用戶照片，它將生成一個預簽名的URL，\n以便用戶的瀏覽器可以直接上傳圖片到S3。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  presignedUrl: 'https://example.com/presigned-url'
                  fileDestination: userPhotos/1234567890.jpg
                properties:
                  presignedUrl:
                    type: string
                    example: 'https://example.com/presigned-url'
                  fileDestination:
                    type: string
                    example: userPhotos/1234567890.jpg
      tags:
        - User
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                userPhoto:
                  type: string
                  format: binary
                  description: 'optional 用戶的新照片。應該是一個圖像文件。'
                name:
                  type: string
                  description: 'optional 新的用戶名稱。示例：John Doe'
                  example: dolorem
                email:
                  type: string
                  description: 'optional 新的電子郵件地址。示例：john.doe@example.com'
                  example: lreinger@example.net
tags:
  -
    name: Ability
    description: 'Operations related to abilities.'
  -
    name: Auth
    description: 'Operations related to auth.'
  -
    name: CartItem
    description: 'Operations related to cartItems.'
  -
    name: GoogleLogin
    description: 'Operations related to googleLogin.'
  -
    name: Nature
    description: 'Operations related to natures.'
  -
    name: Order
    description: 'Operations related to orders.'
  -
    name: OrderDetail
    description: 'Operations related to orderDetais.'
  -
    name: Payment
    description: 'Operations related to payments.'
  -
    name: PaymentResponse
    description: "\n此為藍星金流在結帳完之後會通知後台的，接收結果用的API"
  -
    name: Pokemons
    description: 'Operations related to pokemons.'
  -
    name: Race
    description: "Operations related to races.\n這裡的種族就是寶可夢的意思"
  -
    name: Register
    description: 'Operations related to register.'
  -
    name: User
    description: 'Operations related to users.'
