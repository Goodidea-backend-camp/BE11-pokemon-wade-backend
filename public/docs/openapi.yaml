openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://wade.monster.com'
paths:
  /api/abilities:
    get:
      summary: 特性列表
      operationId: ''
      description: 主要在於可以讓使用更新寶可夢的時候，在特性部分有選項可以讓使用者選擇
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"id\": \"3\",\n \"name\": \"strong\",\n}"
      tags:
        - Ability
    post:
      summary: 特性新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Ability saved successfully'
                properties:
                  message:
                    type: string
                    example: 'Ability saved successfully'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    name:
                      - 名稱只能包含中文和英文字。
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        example:
                          - 名稱只能包含中文和英文字。
                        items:
                          type: string
      tags:
        - Ability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: '能力的名稱. 必須是唯一的，只能包含中文和英文字，且最大長度為255個字符.'
                  example: debitis
              required:
                - name
  '/api/abilities/{ability_id}':
    patch:
      summary: 特性修改
      operationId: ''
      description: 此端點允許您更新現有的特性。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Ability updated successfully'
                properties:
                  message:
                    type: string
                    example: 'Ability updated successfully'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    name:
                      - 名稱只能包含中文和英文字符。
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        example:
                          - 名稱只能包含中文和英文字符。
                        items:
                          type: string
      tags:
        - Ability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: '需要更新的特性名稱. 必須是唯一的，只能包含中文和英文字符，且最大長度為255個字符.'
                  example: ut
              required:
                - name
    parameters:
      -
        in: path
        name: ability_id
        description: 'The ID of the ability.'
        example: 1
        required: true
        schema:
          type: integer
  /api/Auth/login:
    post:
      summary: 登入
      operationId: ''
      description: 此端點允許用戶使用他們的電子郵件和密碼來登入系統，並返回一個JWT令牌。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful'
                  token: 'Generated JWT token'
                  user: 'Authenticated user object'
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  token:
                    type: string
                    example: 'Generated JWT token'
                  user:
                    type: string
                    example: 'Authenticated user object'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Invalid credentials'
                properties:
                  error:
                    type: string
                    example: 'Invalid credentials'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 用戶的電子郵件地址。例子：user@example.com
                  example: selmer19@example.net
                password:
                  type: string
                  description: 用戶的密碼。
                  example: '__+69_kbZ#g'
              required:
                - email
                - password
      security: []
  /api/Auth/logout:
    post:
      summary: 登出
      operationId: ''
      description: 此端點允許已經登入的用戶登出，它會使當前的JWT令牌失效。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully logged out'
                properties:
                  message:
                    type: string
                    example: 'Successfully logged out'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Failed to logout'
                properties:
                  message:
                    type: string
                    example: 'Failed to logout'
      tags:
        - Auth
      security: []
  '/api/email/verify/{id}/{hash}':
    get:
      summary: 註冊email驗證信確認
      operationId: email
      description: "電子郵件驗證確認\n\n此端點用於確認用戶的電子郵件驗證。它會比對提供的hash值和用戶的電子郵件生成的hash值。\n如果驗證成功，該用戶的電子郵件將被標記為已驗證，並且將觸發一個已驗證的事件。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email already verified.'
                properties:
                  message:
                    type: string
                    example: 'Email already verified.'
      tags:
        - Auth
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify.'
        example: ducimus
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: ''
        example: architecto
        required: true
        schema:
          type: string
  '/api/checkVerificationStatus/{email}':
    get:
      summary: 確認user表註冊驗證信狀態
      operationId: user
      description: "此端點用於檢查指定電子郵件的用戶是否已完成電子郵件驗證。\n它將返回用戶的電子郵件驗證狀態，無論是已驗證還是未驗證。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"isVerified\": true/false\n}"
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'User not found'
                properties:
                  error:
                    type: string
                    example: 'User not found'
      tags:
        - Auth
      security: []
    parameters:
      -
        in: path
        name: email
        description: ''
        example: verda53@example.org
        required: true
        schema:
          type: string
  /api/cart_items:
    get:
      summary: 顯示購物車商品
      operationId: ''
      description: 這部分主要是用來顯示購物車頁面的商品資訊
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            \"id\": \"項目ID\",\n            \"amount\": \"購物車中的商品數量\",\n            \"current_price\": \"當前種族價格（如果種族已加載）\",\n            \"race_name\": \"種族名稱（如果種族已加載）\",\n            \"race_photo\": \"種族圖片URL（如果種族已加載）\",\n            \"race_id\": \"種族ID（如果種族已加載）\"\n        },\n\n    ]\n}"
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - CartItem
    post:
      summary: 加入購物車
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Item added to cart successfully.'
                properties:
                  message:
                    type: string
                    example: 'Item added to cart successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Requested quantity exceeds available stock.'
                properties:
                  error:
                    type: string
                    example: 'Requested quantity exceeds available stock.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Race not found.'
                properties:
                  error:
                    type: string
                    example: 'Race not found.'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: 購買的數量，必須在1到庫存的範圍內。
                  example: 2
                race_id:
                  type: integer
                  description: 種族的ID，必須存在於種族表中。
                  example: 5
              required:
                - quantity
                - race_id
  /api/cart_items/total_price:
    get:
      summary: 購物車總價格計算
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    total_price: 計算的總金額
                properties:
                  data:
                    type: object
                    properties:
                      total_price:
                        type: string
                        example: 計算的總金額
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Some cart items do not belong to the user or do not exist'
                properties:
                  error:
                    type: string
                    example: 'Some cart items do not belong to the user or do not exist'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_item_ids:
                  type: array
                  description: 需要計算的購物車項目ID的列表。
                  example:
                    - 1
                    - 2
                    - 3
                  items:
                    type: string
              required:
                - cart_item_ids
  '/api/cart_items/{cart_item_id}':
    put:
      summary: 購物車更新
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_price: 總金額
                properties:
                  total_price:
                    type: string
                    example: 總金額
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation error message.'
                properties:
                  error:
                    type: string
                    example: 'Validation error message.'
      tags:
        - CartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: 更新的商品數量，必須在1到庫存的範圍內。
                  example: 3
              required:
                - quantity
    delete:
      summary: 購物車刪除
      operationId: ''
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - CartItem
    parameters:
      -
        in: path
        name: cart_item_id
        description: 'The ID of the cart item.'
        example: 5
        required: true
        schema:
          type: integer
  /api/natures:
    get:
      summary: 性格詳情
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: '性格的 ID'
                    name: 性格的名稱
      tags:
        - Nature
    post:
      summary: 性格新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Nature saved successfully'
                properties:
                  message:
                    type: string
                    example: 'Nature saved successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation error messages if any'
                properties:
                  error:
                    type: string
                    example: 'Validation error messages if any'
      tags:
        - Nature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 性格的名稱。要求是唯一的且最多包含255個字符。
                  example: doloribus
              required:
                - name
  '/api/natures/{nature_id}':
    patch:
      summary: 性格修改
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Nature updated successfully'
                properties:
                  message:
                    type: string
                    example: 'Nature updated successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Validation error messages if any'
                properties:
                  error:
                    type: string
                    example: 'Validation error messages if any'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Nature not found'
                properties:
                  message:
                    type: string
                    example: 'Nature not found'
      tags:
        - Nature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 性格的新名稱。要求是唯一的且最多包含255個字符。
                  example: cum
              required:
                - name
    parameters:
      -
        in: path
        name: nature_id
        description: 'The ID of the nature.'
        example: 1
        required: true
        schema:
          type: integer
  /api/orders:
    post:
      summary: 訂單新增
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 新創建的訂單的ID
                properties:
                  id:
                    type: string
                    example: 新創建的訂單的ID
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total_price:
                  type: number
                  description: 訂單的總價格。
                  example: 0.69784
                payment_method:
                  type: string
                  description: 訂單的付款方式。
                  example: incidunt
                payment_status:
                  type: string
                  description: 訂單的付款狀態。
                  example: eos
              required:
                - total_price
                - payment_method
                - payment_status
    get:
      summary: 訂單列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"data\": [\n        {\n            ...各個訂單的資料\n        }\n    ]\n}"
      tags:
        - Order
  '/api/orders/{order_id}/order_details':
    get:
      summary: 訂單細節列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - OrderDetail
    parameters:
      -
        in: path
        name: order_id
        description: 'The ID of the order.'
        example: 16
        required: true
        schema:
          type: integer
      -
        in: path
        name: order
        description: 訂單的ID。
        example: laborum
        required: true
        schema:
          type: string
  /api/orders_details:
    post:
      summary: 訂單細節新增
      operationId: ''
      description: ''
      parameters: []
      responses: {  }
      tags:
        - OrderDetail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  description: 訂單的ID。
                  example: 16
                race_id:
                  type: integer
                  description: "產品(Race)的ID。\n\n根据指定的race_id从用户的购物车中提取数量，并根据race的价格计算出单价和总价。\n创建订单详情后，减少相应的库存，并清除用户购物车中的该race项。"
                  example: 16
              required:
                - order_id
                - race_id
  /api/payments:
    post:
      summary: 請求藍星金流結帳頁面
      operationId: ''
      description: "此方法主要功能如下：\n1. 验证当前用户。\n2. 更新与当前用户关联的购物车项目的结账状态。\n3. 生成与藍星金流相关的支付参数（包括加密和哈希）。\n4. 返回支付参数，以便前端将用户重定向到藍星金流的支付页面。"
      parameters: []
      responses: {  }
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totalPrice:
                  type: number
                  description: 购物车中所有商品的总价格。
                  example: 756.2065
              required:
                - totalPrice
  /api/payResult:
    post:
      summary: 藍星金流結帳完後結果返回確認，寄通知信給使用者
      operationId: ''
      description: "此方法主要功能如下：\n1. 從请求中提取支付相关的信息。\n2. 验证支付回调的数字签名以确保数据的完整性。\n3. 根据支付结果记录相关的日志信息。\n4. 在支付成功后向用户发送通知邮件。"
      parameters: []
      responses: {  }
      tags:
        - PaymentResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TradeInfo:
                  type: string
                  description: 支付相关的加密数据。
                  example: officia
                TradeSha:
                  type: string
                  description: 支付回调的数字签名。
                  example: qui
              required:
                - TradeInfo
                - TradeSha
  /api/pokemons:
    get:
      summary: 使用者寶可夢的列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Pokemons
    post:
      summary: 新增一個屬於該使用者的寶可夢。
      operationId: ''
      description: "此方法將驗證請求數據，並在成功驗證後，\n為當前經過身份驗證的用戶新增一隻寶可夢。"
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 寶可夢的名稱，必填，最大15字符長，且必須在系統中是唯一的。：皮卡丘
                  example: similique
                race_id:
                  type: integer
                  description: "寶可夢的種族ID，必填，該ID必須存在於系統的'races'表中。：1"
                  example: 16
                ability_id:
                  type: integer
                  description: "寶可夢的能力ID，必填，該ID必須存在於系統的'abilities'表中。：2"
                  example: 4
                nature_id:
                  type: integer
                  description: "寶可夢的性格ID，必填，該ID必須存在於系統的'natures'表中。：3"
                  example: 11
                level:
                  type: integer
                  description: 寶可夢的等級，必填，其值必須是1到100之間的整數。：10
                  example: 2
                skills:
                  type: array
                  description: '寶可夢的技能列表，必填，至少包含1項，最多4項技能。：[1, 2, 3]'
                  example:
                    - quasi
                  items:
                    type: string
              required:
                - name
                - race_id
                - ability_id
                - nature_id
                - level
                - skills
  '/api/pokemons/{id}':
    get:
      summary: 顯示指定寶可夢的詳細資訊。
      operationId: ''
      description: 此方法獲取指定寶可夢的詳細資訊，包括其種族、能力、性格和技能。
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 皮卡丘
                  level: 10
                  race_id: 1
                  race: 電鼠
                  ability: 靜電
                  nature: 認真
                  skills:
                    - 電擊
                    - 鐵尾
                  host: Ash
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 皮卡丘
                  level:
                    type: integer
                    example: 10
                  race_id:
                    type: integer
                    example: 1
                  race:
                    type: string
                    example: 電鼠
                  ability:
                    type: string
                    example: 靜電
                  nature:
                    type: string
                    example: 認真
                  skills:
                    type: array
                    example:
                      - 電擊
                      - 鐵尾
                    items:
                      type: string
                  host:
                    type: string
                    example: Ash
      tags:
        - Pokemons
    put:
      summary: 修改指定的寶可夢。
      operationId: ''
      description: "此方法允許使用者修改他們的寶可夢的資訊。\n使用者只能修改他們自己的寶可夢，不能修改其他人的寶可夢。"
      parameters: []
      responses: {  }
      tags:
        - Pokemons
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'optional 寶可夢的名字。最大長度為15個字符。範例：皮卡丘'
                  example: earum
                race_id:
                  type: integer
                  description: "optional 寶可夢的種族ID。該ID必須存在於系統的'races'表中。範例：1"
                  example: 7
                ability_id:
                  type: integer
                  description: "optional 寶可夢的能力ID。該ID必須存在於系統的'abilities'表中。範例：2"
                  example: 17
                nature_id:
                  type: integer
                  description: "optional 寶可夢的性格ID。該ID必須存在於系統的'natures'表中。範例：3"
                  example: 5
                level:
                  type: integer
                  description: 'optional 寶可夢的等級。其值必須是1到100之間的整數。範例：10'
                  example: 12
                skills:
                  type: array
                  description: 'optional 寶可夢的技能列表。至少包含1項，最多4項技能。範例：[1, 2, 3]'
                  example:
                    - quia
                  items:
                    type: string
    delete:
      summary: 刪除指定的寶可夢。
      operationId: ''
      description: "此方法允許授權的使用者刪除他們的寶可夢。\n成功刪除寶可夢後，將返回成功響應。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'pokemon deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'pokemon deleted successfully'
        204:
          description: ''
      tags:
        - Pokemons
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
      -
        in: path
        name: pokemon
        description: 寶可夢的ID。示例：1
        example: 16
        required: true
        schema:
          type: integer
  '/api/pokemons/{pokemon_id}/evolution':
    put:
      summary: 判斷指定的寶可夢是否可以進化。
      operationId: ''
      description: "此方法首先檢查當前用戶是否有權進行進化操作，\n然後檢查寶可夢是否達到其種族所需的進化等級。\n如果寶可夢已達到進化等級，則更新其種族ID以反映其新的進化形態。"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 寶可夢已是最終形態
                properties:
                  message:
                    type: string
                    example: 寶可夢已是最終形態
      tags:
        - Pokemons
    parameters:
      -
        in: path
        name: pokemon_id
        description: 'The ID of the pokemon.'
        example: 15
        required: true
        schema:
          type: integer
      -
        in: path
        name: pokemon
        description: 寶可夢的ID。範例：1
        example: 10
        required: true
        schema:
          type: integer
  /api/races:
    get:
      summary: 種族列表
      operationId: ''
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Race
  '/api/races/{race_id}/evolutionLevel':
    get:
      summary: 取得種族進化等級
      operationId: ''
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Race
    parameters:
      -
        in: path
        name: race_id
        description: 'The ID of the race.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/races/{race_id}/skill':
    get:
      summary: 取得種族能夠學的技能
      operationId: ''
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Race
    parameters:
      -
        in: path
        name: race_id
        description: 'The ID of the race.'
        example: 1
        required: true
        schema:
          type: integer
  /api/register:
    post:
      summary: '註冊,寄註冊信'
      operationId: ''
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: jyzroxijgavrgbxsfoc
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: prohaska.aiden@example.net
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: 'pqt?=)P>H28Mi%oWpP'
              required:
                - name
                - email
                - password
      security: []
  /api/user:
    get:
      summary: 使用者個人資訊
      operationId: ''
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  name: 'John Doe'
                  photo: 'https://example.com/photo.jpg'
                  email: johndoe@example.com
                properties:
                  name:
                    type: string
                    example: 'John Doe'
                  photo:
                    type: string
                    example: 'https://example.com/photo.jpg'
                  email:
                    type: string
                    example: johndoe@example.com
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'User not found'
                properties:
                  error:
                    type: string
                    example: 'User not found'
      tags:
        - User
    post:
      summary: 更新使用者資訊
      operationId: ''
      description: '主要還會產生一個presigned URL來讓使用者瀏覽器去上傳圖片'
      parameters: []
      responses: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                userPhoto:
                  type: string
                  format: binary
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: zjfubdyrap
              required:
                - name
tags:
  -
    name: Ability
    description: 'Operations related to abilities.'
  -
    name: Auth
    description: 'Operations related to auth.'
  -
    name: CartItem
    description: 'Operations related to cartItems.'
  -
    name: Nature
    description: 'Operations related to natures.'
  -
    name: Order
    description: 'Operations related to orders.'
  -
    name: OrderDetail
    description: 'Operations related to orderDetais.'
  -
    name: Payment
    description: 'Operations related to payments.'
  -
    name: PaymentResponse
    description: "\n此為藍星金流在結帳完之後會通知後台的，接收結果用的API"
  -
    name: Pokemons
    description: 'Operations related to pokemons.'
  -
    name: Race
    description: "Operations related to races.\n這裡的種族就是寶可夢的意思"
  -
    name: Register
    description: 'Operations related to register.'
  -
    name: User
    description: 'Operations related to users.'
